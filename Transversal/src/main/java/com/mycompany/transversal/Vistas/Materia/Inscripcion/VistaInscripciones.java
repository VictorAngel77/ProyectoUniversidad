/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.transversal.Vistas.Materia.Inscripcion;

import Data.AlumnoConexion;
import Data.Conexion;
import Data.InscripcionData;
import com.mycompany.transversal.Entidades.Alumno;
import com.mycompany.transversal.Entidades.Inscripcion;
import com.mycompany.transversal.Entidades.Materia;
import java.sql.SQLException;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cisco
 */
public class VistaInscripciones extends javax.swing.JPanel {
    private static Conexion con;
    private static List<Alumno> alumnos;
    private static AlumnoConexion dbAlumnos;
    private static InscripcionData dbInscripcion;
    private static DefaultTableModel modelo;
    /**
     * Creates new form VistaInscripciones
     */
    public VistaInscripciones() {
        con = new Conexion();
        dbAlumnos = new AlumnoConexion(con);
        dbInscripcion = new InscripcionData();
        initComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInscripciones = new javax.swing.JTable();
        botonInscripbir = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        AlumnosCB = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        filtro_inscripto = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        botonActualizarNota = new javax.swing.JButton();

        tablaInscripciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "idInscripcion", "Nombre", "AÃ±o", "Nota"
            }
        ));
        tablaInscripciones.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tablaInscripcionesInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tablaInscripciones);

        botonInscripbir.setText("Inscribir");
        botonInscripbir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInscripbirActionPerformed(evt);
            }
        });

        botonEliminar.setText("Eliminar Inscripcion");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        AlumnosCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        AlumnosCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                AlumnosCBFocusLost(evt);
            }
        });
        AlumnosCB.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                AlumnosCBPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        AlumnosCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AlumnosCBActionPerformed(evt);
            }
        });

        jLabel2.setText("Alumno");

        buttonGroup1.add(filtro_inscripto);
        filtro_inscripto.setSelected(true);
        filtro_inscripto.setText("Inscripto");
        filtro_inscripto.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                filtro_inscriptoStateChanged(evt);
            }
        });
        filtro_inscripto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtro_inscriptoActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("No inscripto");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        botonActualizarNota.setText("Actualizar nota");
        botonActualizarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarNotaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(botonEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonActualizarNota)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonInscripbir))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filtro_inscripto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButton4))
                            .addComponent(AlumnosCB, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AlumnosCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filtro_inscripto)
                    .addComponent(jRadioButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonEliminar)
                    .addComponent(botonInscripbir)
                    .addComponent(botonActualizarNota))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botonInscripbirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInscripbirActionPerformed
        // TODO add your handling code here:
        try {
            int row = tablaInscripciones.getSelectedRow();
            Integer idMateria = Integer.valueOf(
                    modelo.getValueAt(row, 0).toString()
            );

            Materia materia = new Materia();
            materia.setIdMateria(idMateria);

            Alumno alumno = new Alumno();
            double nota;
            alumno.setIdAlumno(Integer.parseInt(
                            AlumnosCB.getSelectedItem().toString().split(" ")[0]));
            try {
                nota = Double.parseDouble(
                    modelo.getValueAt(row, 3).toString());
            } catch (Exception ex) {
                nota = 0;
            }

            Inscripcion inscripcion = new Inscripcion(
                    alumno,
                    materia,
                    nota);
            dbInscripcion.saveInscripcion(inscripcion);
        } catch (NumberFormatException ex) {
            System.out.println(ex.getMessage());
        } finally {
            initData();
        }

    }//GEN-LAST:event_botonInscripbirActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        // TODO add your handling code here:
        Integer idInscripcion = Integer.valueOf(modelo.getValueAt(tablaInscripciones.getSelectedRow(), 0).toString());
        dbInscripcion.deleteInscripcion(idInscripcion);
        setupTablaInscripciones();
    }//GEN-LAST:event_botonEliminarActionPerformed

    private void filtro_inscriptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtro_inscriptoActionPerformed
        // TODO add your handling code here:
        setupTablaInscripciones();

    }//GEN-LAST:event_filtro_inscriptoActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        // TODO add your handling code here:
        setupTablaInscripciones();
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void AlumnosCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AlumnosCBActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_AlumnosCBActionPerformed

    private void filtro_inscriptoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_filtro_inscriptoStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_filtro_inscriptoStateChanged

    private void AlumnosCBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_AlumnosCBFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_AlumnosCBFocusLost

    private void AlumnosCBPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_AlumnosCBPopupMenuWillBecomeInvisible
        // TODO add your handling code here:
        setupTablaInscripciones();
    }//GEN-LAST:event_AlumnosCBPopupMenuWillBecomeInvisible

    private void botonActualizarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarNotaActionPerformed
        // TODO add your handling code here:
        int row = tablaInscripciones.getSelectedRow();
        int id = Integer.parseInt(modelo.getValueAt(row, 0).toString());
        double nota = Double.parseDouble(modelo.getValueAt(row, 3).toString());
        if (nota > 0.0 && nota <= 10.0) {
            dbInscripcion.actualizarNota(id, nota);
        }
        setupTablaInscripciones();
    }//GEN-LAST:event_botonActualizarNotaActionPerformed

    private void tablaInscripcionesInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tablaInscripcionesInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaInscripcionesInputMethodTextChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> AlumnosCB;
    private javax.swing.JButton botonActualizarNota;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonInscripbir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton filtro_inscripto;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaInscripciones;
    // End of variables declaration//GEN-END:variables


    public void initData() {
        alumnos = dbAlumnos.listarAlumnos();
        setupBotones();
        setupAlumnosCB();
        setupTablaInscripciones();
    }

    public void setupAlumnosCB() {
        AlumnosCB.removeAllItems();
        alumnos
                .forEach(al -> AlumnosCB.addItem(al.toString()));
    }

    public void setupBotones() {
        if (filtro_inscripto.isSelected()) {
            botonEliminar.setVisible(true);
            botonInscripbir.setVisible(false);
            botonActualizarNota.setVisible(true);
        } else {
            botonActualizarNota.setVisible(false);
            botonEliminar.setVisible(false);
            botonInscripbir.setVisible(true);
        }
    }

    public void setupTablaInscripciones() {
        try {
            modelo = new DefaultTableModel(new String[]{"id", "Materia", "AÃ±o", "Nota"}, 0);
            Integer idAlumno = Integer.valueOf(
                    AlumnosCB.getSelectedItem().toString().split(" ")[0]);
            boolean filtro = filtro_inscripto.isSelected();
            if (filtro) {
                dbInscripcion.fetchInscripcionesByIdAlumno(idAlumno)
                        .forEach(ins -> {
                            modelo.addRow(
                                    new Object[]{
                                        String.valueOf(ins.getIdInscripcion()),
                                        ins.getMateria().getNombre(),
                                        String.valueOf(ins.getMateria().getAÃ±o()),
                                        String.valueOf(ins.getNota())
                                    });
                        });
            } else {
                dbInscripcion.fetchMateriasNoCursadas(idAlumno)
                        .forEach(mat -> {
                            modelo.addRow(
                                    new Object[]{
                                        String.valueOf(mat.getIdMateria()),
                                        mat.getNombre(),
                                        String.valueOf(mat.getAÃ±o())
                                    });
                        });
            }

            tablaInscripciones.setModel(modelo);
            setupBotones();
        } catch (SQLException sQLException) {
        }

    }

}
