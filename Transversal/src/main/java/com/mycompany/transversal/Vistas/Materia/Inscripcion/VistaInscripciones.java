/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.transversal.Vistas.Materia.Inscripcion;

import Data.AlumnoConexion;
import Data.Conexion;
import Data.InscripcionData;
import com.mycompany.transversal.Entidades.Alumno;
import com.mycompany.transversal.Entidades.Inscripcion;
import com.mycompany.transversal.Entidades.Materia;
import java.sql.SQLException;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cisco
 */
public class VistaInscripciones extends javax.swing.JPanel {

    private static Conexion con;
    private static AlumnoConexion conexionAlumno;
    private static InscripcionData conexionInscripcion;
    /**
     * Creates new form VistaInscripciones
     */
    private static DefaultComboBoxModel modeloAlumnos;
    private static DefaultTableModel modeloTabla;
    private static Alumno alumnoSeleccionado;

    public VistaInscripciones() {

        try {
            con = new Conexion();
            conexionAlumno = new AlumnoConexion(con);
            conexionInscripcion = new InscripcionData();
            Conexion.getConnection();
            initComponents();
            configurarComboAlumnos();

            selectAlumno();
            configurarTablaInscripciones();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

    }

    public void configurarComboAlumnos() {
        modeloAlumnos = new DefaultComboBoxModel<Alumno>();
        modeloAlumnos.addAll(
                conexionAlumno.listarAlumnos().stream()
                        .filter(Alumno::isActivo)
                        .toList()
        );
        alumnosCB.setModel(modeloAlumnos);
    }

    public void configurarTablaInscripciones() {
        try {
            alumnoSeleccionado = (Alumno) alumnosCB.getSelectedItem();
            int idAlumno = alumnoSeleccionado.getIdAlumno();
            String[] header;
            if (filtro_inscripto.isSelected()) {
                header = new String[]{
                    "idInscripcion", "Materia", "A単o", "Nota"
                };
            } else {
                header = new String[]{
                    "idMateria", "Materia", "A単o", "Nota"
                };
            }
            modeloTabla = new DefaultTableModel(header, 0);

            if ("idInscripcion".equals(modeloTabla.getColumnName(0))) {
                conexionInscripcion
                        .fetchInscripcionesByIdAlumno(idAlumno)
                        .forEach(ins -> {

                            if (!ins.toString().contains("null")) {
                                modeloTabla.addRow(
                                        ins.toString().split(", ")
                                );
                            }
                        });
            } else {
                conexionInscripcion.fetchMateriasNoCursadas(idAlumno)
                        .forEach(materia -> {
                            modeloTabla.addRow(new Object[]{
                                materia.getIdMateria(),
                                materia.getNombre(),
                                materia.getA単o(),
                                0.0
                            });
                        });
            };
            tablaInscripciones.setModel(modeloTabla);

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }
        configurarBotones();
    }

    public void configurarBotones() {
        if (filtro_inscripto.isSelected()) {
            botonEliminar.setVisible(true);
            botonInscripbir.setVisible(false);
            botonActualizarNota.setVisible(true);
        } else {
            botonActualizarNota.setVisible(false);
            botonEliminar.setVisible(false);
            botonInscripbir.setVisible(true);
        }
    }

    public void selectAlumno() {
        alumnosCB.setSelectedIndex(0);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaInscripciones = new javax.swing.JTable();
        botonInscripbir = new javax.swing.JButton();
        botonEliminar = new javax.swing.JButton();
        alumnosCB = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        filtro_inscripto = new javax.swing.JRadioButton();
        jRadioButton4 = new javax.swing.JRadioButton();
        botonActualizarNota = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        tablaInscripciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "idInscripcion", "Nombre", "A単o", "Nota"
            }
        ));
        tablaInscripciones.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tablaInscripcionesInputMethodTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tablaInscripciones);

        botonInscripbir.setText("Inscribir");
        botonInscripbir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInscripbirActionPerformed(evt);
            }
        });

        botonEliminar.setText("Eliminar Inscripcion");
        botonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarActionPerformed(evt);
            }
        });

        alumnosCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        alumnosCB.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                alumnosCBFocusLost(evt);
            }
        });
        alumnosCB.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                alumnosCBPopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        alumnosCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alumnosCBActionPerformed(evt);
            }
        });

        jLabel2.setText("Alumno");

        buttonGroup1.add(filtro_inscripto);
        filtro_inscripto.setSelected(true);
        filtro_inscripto.setText("Inscripto");
        filtro_inscripto.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                filtro_inscriptoStateChanged(evt);
            }
        });
        filtro_inscripto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filtro_inscriptoActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton4);
        jRadioButton4.setText("No inscripto");
        jRadioButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton4ActionPerformed(evt);
            }
        });

        botonActualizarNota.setText("Actualizar nota");
        botonActualizarNota.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarNotaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 688, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(botonEliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonActualizarNota)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(botonInscripbir))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(filtro_inscripto)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jRadioButton4))
                            .addComponent(alumnosCB, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(alumnosCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filtro_inscripto)
                    .addComponent(jRadioButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonEliminar)
                    .addComponent(botonInscripbir)
                    .addComponent(botonActualizarNota))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void botonInscripbirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInscripbirActionPerformed
        // TODO add your handling code here:
        String nombreMateria;
        double nota;
        try {
            int rowN = tablaInscripciones.getSelectedRow();
            nombreMateria = tablaInscripciones.getValueAt(rowN, 1).toString();

            if (nombreMateria != null) {
                Materia materia = new Materia(
                        tablaInscripciones.getValueAt(rowN, 1).toString(),
                        (int) tablaInscripciones.getValueAt(rowN, 2),
                        true
                );
                materia.setIdMateria((int) tablaInscripciones.getValueAt(rowN, 0));
                try {
                    nota = Double.valueOf(
                            tablaInscripciones.getValueAt(rowN, 3).toString()
                    );
                } catch (Exception ex) {
                    nota = 0.0;
                }
                Inscripcion nueva = new Inscripcion(alumnoSeleccionado, materia, nota);
                conexionInscripcion.saveInscripcion(nueva);
            }
            configurarTablaInscripciones();
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        };

    }//GEN-LAST:event_botonInscripbirActionPerformed

    private void botonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarActionPerformed
        // TODO add your handling code here:
        Integer rowN, id = null;
        try {
            rowN = tablaInscripciones.getSelectedRow();
            id = Integer.valueOf(
                    tablaInscripciones.getValueAt(rowN, 0).toString()
            );
            if (id != null) {
                conexionInscripcion.deleteInscripcion(id);
                configurarTablaInscripciones();
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            System.out.println("Seleccionaste un elemento en la tabla?");
        }
    }//GEN-LAST:event_botonEliminarActionPerformed

    private void filtro_inscriptoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filtro_inscriptoActionPerformed
        // TODO add your handling code here:
        configurarTablaInscripciones();
    }//GEN-LAST:event_filtro_inscriptoActionPerformed

    private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
        // TODO add your handling code here:
        configurarTablaInscripciones();
    }//GEN-LAST:event_jRadioButton4ActionPerformed

    private void alumnosCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alumnosCBActionPerformed
        // TODO add your handling code here:
        configurarTablaInscripciones();
    }//GEN-LAST:event_alumnosCBActionPerformed

    private void filtro_inscriptoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_filtro_inscriptoStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_filtro_inscriptoStateChanged

    private void alumnosCBFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_alumnosCBFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_alumnosCBFocusLost

    private void alumnosCBPopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_alumnosCBPopupMenuWillBecomeInvisible
        // TODO add your handling code here:

    }//GEN-LAST:event_alumnosCBPopupMenuWillBecomeInvisible

    private void botonActualizarNotaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarNotaActionPerformed
        // TODO add your handling code here:
        Integer id, rowN = null;
        double nota;
        try {
            rowN = tablaInscripciones.getSelectedRow();
            if (rowN != null) {

                id = Integer.valueOf(
                        tablaInscripciones.getValueAt(rowN, 0).toString()
                );
                try {
                    nota = Double.valueOf(
                            tablaInscripciones.getValueAt(rowN, 3).toString()
                    );
                } catch (Exception ex) {
                    nota = 0.0;
                }

                if (nota >= 0.0 && nota <= 10.0) {
                    conexionInscripcion.actualizarNota(id, nota);
                }
            }
        } catch (Exception ex) {
            System.out.println(ex.getMessage());
            System.out.println("Seleccionaste un elemento en la tabla?");
        }

        configurarTablaInscripciones();
    }//GEN-LAST:event_botonActualizarNotaActionPerformed

    private void tablaInscripcionesInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tablaInscripcionesInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_tablaInscripcionesInputMethodTextChanged

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // TODO add your handling code here:
        configurarComboAlumnos();
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JComboBox<String> alumnosCB;
    private javax.swing.JButton botonActualizarNota;
    private javax.swing.JButton botonEliminar;
    private javax.swing.JButton botonInscripbir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton filtro_inscripto;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton jRadioButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaInscripciones;
    // End of variables declaration//GEN-END:variables

}
